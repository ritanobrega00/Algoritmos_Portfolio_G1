# -*- coding: utf-8 -*-
"""MatrixBorrows.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJsLdGXpSOKisVhiBZFRbeMag3-nP8Au
"""

## Rever o código:

s = "ACTAGAGACA$"

def rotacoes(s):
  return [s[i:] + s[:i] for i in range(len(s))]

def transformadaBWS(s):
  ROT = rotacoes(s)
  ORD = sorted(ROT)
  TRASNF = [x[-1] for x in ORD]
  return "".join(TRASNF)

def para_lista(s):
  import re
  return re.findall(r'[$ATGC]\d+', s, re.I)

def inversaBWT(s):
  NS = para_lista(numera_ocorr(s))
  NO = para_lista(numera_ocorr(sorted(s)))

def numera_ocorr(s):
  vistas = {}
  res = ""
  for letra in s:
    num_corr = vistas.get(letra, 1)
    res += f"{letra}{num_ocorr}"
    vistas[letra] = num_ocorr + 1
  return res

s = "ACTAGAGACA$"
print(transformadaBWS(s))

## Fazer código que permita buscar subseqências
# (da mesma forma que a busca, porém começando pelo primeiro elemento da subseq - parar no primeiro erro)
# Começar pelos testes